#!/bin/bash# Assurez-vous que le script Ã©choue en cas d'erreurset -e# Affichage des versions pour vÃ©rifier que tout est en placeecho "Node version: $(node -v)"echo "NPM version: $(npm -v)"echo "Docker version: $(docker --version)"# VÃ©rifier si Docker est installÃ©if ! command -v docker &> /dev/nullthen    echo "Docker n'est pas installÃ©. Veuillez installer Docker pour continuer."    exit 1fi# VÃ©rification des dÃ©pendancesecho "Installation des dÃ©pendances Node.js..."npm install# VÃ©rification que la commande "build" est dÃ©finie dans package.jsonecho "VÃ©rification du build..."if npm run build; then  echo "Build rÃ©ussi"else  echo "Erreur lors du build"  exit 1fi# Construction de l'image Dockerecho "Construction de l'image Docker..."docker build -t ecommerce-app .# VÃ©rification si le conteneur existe dÃ©jÃ , le supprimer si nÃ©cessaireif docker ps -a --format '{{.Names}}' | grep -q 'ecommerce-app'; then  echo "Le conteneur ecommerce-app existe dÃ©jÃ , arrÃªt et suppression du conteneur existant."  docker rm -f ecommerce-app || true  # Utilisation de "true" pour Ã©viter l'Ã©chec en cas de suppression impossiblefi# VÃ©rification de l'image Docker avant de dÃ©marrer le conteneurif ! docker images --format '{{.Repository}}' | grep -q 'ecommerce-app'; then  echo "Erreur : L'image Docker 'ecommerce-app' n'a pas Ã©tÃ© construite avec succÃ¨s."  exit 1fi# DÃ©marrer le conteneur Dockerecho "DÃ©marrage du conteneur Docker..."docker run -d -p 3000:3000 --name ecommerce-app ecommerce-app# VÃ©rifier si le conteneur est bien dÃ©marrÃ©if docker ps --filter "name=ecommerce-app" --format '{{.Names}}' | grep -q 'ecommerce-app'; then  echo "Le conteneur ecommerce-app est dÃ©marrÃ© avec succÃ¨s sur le port 3000."else  echo "Erreur : Le conteneur ecommerce-app n'a pas dÃ©marrÃ© correctement."  exit 1fiecho "DÃ©ploiement terminÃ© !"